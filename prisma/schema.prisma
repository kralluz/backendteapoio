generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  articles          Article[]
  activities        Activity[]
  comments          Comment[]
  likes             Like[]
  favorites         Favorite[]
  autismProfiles    AutismProfile[]
  profileCreatedBy  AutismProfile[] @relation("ProfileCreatedBy")

  @@map("users")
}

model Article {
  id          String   @id @default(uuid())
  title       String
  content     String   @db.Text
  excerpt     String?
  image       String?
  category    String
  readTime    Int      @default(5)
  published   Boolean  @default(true)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  favorites Favorite[]

  @@map("articles")
}

model Activity {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  content     String   @db.Text
  image       String?
  difficulty  String
  ageRange    String
  duration    Int
  materials   String[]
  steps       String[]
  category    String
  published   Boolean  @default(true)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  favorites Favorite[]

  @@map("activities")
}

model AutismProfile {
  id          String   @id @default(uuid())
  name        String
  age         Int
  diagnosis   String
  level       String
  interests   String[]
  sensitivities String[]
  strengths   String[]
  challenges  String[]
  notes       String?  @db.Text
  photo       String?
  parentId    String
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  parent    User  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  createdBy User? @relation("ProfileCreatedBy", fields: [createdById], references: [id])

  @@map("autism_profiles")
}

model Comment {
  id         String   @id @default(uuid())
  content    String   @db.Text
  userId     String
  articleId  String?
  activityId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relações
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  article  Article?  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  activity Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id         String   @id @default(uuid())
  userId     String
  articleId  String?
  activityId String?
  createdAt  DateTime @default(now())

  // Relações
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  article  Article?  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  activity Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
  @@unique([userId, activityId])
  @@map("likes")
}

model Favorite {
  id         String   @id @default(uuid())
  userId     String
  articleId  String?
  activityId String?
  createdAt  DateTime @default(now())

  // Relações
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  article  Article?  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  activity Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
  @@unique([userId, activityId])
  @@map("favorites")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}
